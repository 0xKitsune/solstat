use std::collections::{BTreeSet, HashSet};
use std::{collections::HashMap, fs};

use crate::analyzer::utils::LineNumber;
use crate::analyzer::vulnerabilities::Vulnerability;
use crate::report::report_sections::vulnerabilities::overview;

pub fn generate_vulnerability_report(
    vulnerabilities: HashMap<Vulnerability, Vec<(String, BTreeSet<LineNumber>)>>,
) -> String {
    let mut vulnerability_report = String::from("");

    //Add optimization report overview
    let overview_section = overview::report_section_content();

    let mut high_severity_report_section = String::from("## High Risk\n");
    let mut medium_severity_report_section = String::from("## Medium Risk\n");
    //low or non critical
    let mut low_severity_report_section = String::from("## Low Risk");

    vulnerability_report.push_str((overview_section + "\n").as_str());

    for vulnerability in vulnerabilities {
        if vulnerability.1.len() > 0 {
            let vulnerability_target = vulnerability.0;
            let matches = vulnerability.1;

            let (report_section, vulnerability_severity) =
                get_vulnerability_report_section(vulnerability_target);

            let mut matches_section = String::from("### Lines\n");

            for (file_name, mut lines) in matches {
                for line in lines {
                    //- file_name:line_number\n
                    matches_section
                        .push_str(&(String::from("- ") + &file_name + ":" + &line.to_string()));
                    matches_section.push_str("\n");
                }
            }

            matches_section.push_str("\n\n");

            let completed_report_section = report_section + "\n" + matches_section.as_str();

            match vulnerability_severity {
                VulnerabilitySeverity::High => {
                    high_severity_report_section.push_str(completed_report_section.as_str());
                }
                VulnerabilitySeverity::Medium => {
                    medium_severity_report_section.push_str(completed_report_section.as_str());
                }
                VulnerabilitySeverity::Low => {
                    low_severity_report_section.push_str(completed_report_section.as_str());
                }
            }
        }
    }

    if high_severity_report_section != String::from("## High Risk\n") {
        vulnerability_report.push_str(&high_severity_report_section);
    }

    if medium_severity_report_section != String::from("## Medium Risk\n") {
        vulnerability_report.push_str(&medium_severity_report_section);
    }

    if low_severity_report_section != String::from("## Low Risk") {
        vulnerability_report.push_str(&low_severity_report_section);
    }

    vulnerability_report
}

pub enum VulnerabilitySeverity {
    High,
    Medium,
    Low,
}

pub fn get_vulnerability_report_section(
    vulnerability: Vulnerability,
) -> (String, VulnerabilitySeverity) {
    match vulnerability {}
}
